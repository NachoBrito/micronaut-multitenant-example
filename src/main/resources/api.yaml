openapi: 3.0.3
info:
  title: Sample Multitenant e-commerce
  description: Sample Multitenant e-commerce API

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: http://localhost:8080
tags:
  - name: product
    description: Operations about products
paths:
  /products:
    put:
      tags:
        - product
      summary: Update an existing product
      description: Update an existing product by Id
      operationId: updateProduct
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Update an existent product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '422':
          description: Validation exception
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      tags:
        - product
      summary: Add a new product to the store
      description: Add a new product to the store
      operationId: addProduct
      security:
        - bearerAuth: [ ]
      requestBody:
        description: Create a new product in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
          application/xml:
            schema:
              $ref: '#/components/schemas/Product'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        '401':
          $ref: '#/components/responses/UnauthorizedError'

  /product/search:
    get:
      tags:
        - product
      summary: Finds Products by name query
      description: Returns all products with names matching the query
      operationId: productSearch
      parameters:
        - name: nameContains
          in: query
          description: The name query
          required: true
          explode: true
          schema:
            type: string
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid status value
        '401':
          $ref: '#/components/responses/UnauthorizedError'


  /product/{productId}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      operationId: getProductById
      security:
        - bearerAuth: [ ]
      parameters:
        - name: productId
          in: path
          description: ID of product to return
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
            application/xml:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid ID supplied
        '404':
          description: Product not found
        '401':
          $ref: '#/components/responses/UnauthorizedError'

    post:
      tags:
        - product
      summary: Updates a product in the store with form data
      description: ''
      operationId: updateProductWithForm
      security:
        - bearerAuth: [ ]
      parameters:
        - name: productId
          in: path
          description: ID of product that needs to be updated
          required: true
          schema:
            type: string
            format: uuid
        - name: name
          in: query
          description: Name of product that needs to be updated
          schema:
            type: string
        - name: categoryId
          in: query
          description: Category of product that needs to be updated
          schema:
            type: string
      responses:
        '400':
          description: Invalid input
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags:
        - product
      summary: Deletes a product
      description: delete a product
      operationId: deleteProduct
      security:
        - bearerAuth: [ ]
      parameters:
        - name: productId
          in: path
          description: Product value to delete
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '400':
          description: Invalid product value
        '401':
          $ref: '#/components/responses/UnauthorizedError'
components:
  securitySchemes:
    bearerAuth: # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT # optional, arbitrary value for documentation purposes
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
  schemas:
    Category:
      required:
        - id
        - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    Product:
      required:
        - id
        - name
        - category
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        category:
          $ref: '#/components/schemas/Category'